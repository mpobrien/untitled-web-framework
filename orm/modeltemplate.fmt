package ${package};
import com.mob.orm.*;
import com.google.common.base.*;
import com.google.common.collect.*;
import javax.sql.*;
import java.sql.*;

public class ${table.classname} extends Model{
    private boolean isDirty = false;
    private boolean isNew = true;

//Fields
<#list table.cols as col>
    protected ${col.javaTypeStr} ${col.javaName};
</#list>  

	public enum ${table.classname}Field implements DbField {
<#list table.cols as col>
	<#if col_index == table.cols?size-1>
        ${col.name}("${col.name}");
	<#else>
        ${col.name}("${col.name}"),
	</#if>
</#list>  

        private String column;
        ${table.classname}Field(String column){ this.column = column; }
        public String table(){ return "${table.tablename}"; } 
        public String column(){ return this.column; }
	}

    public Integer getPrimaryKey(){ return 0; }

    public DbField pkField(){ return ${table.classname}Field.${table.primaryKey.name}; }
    public static final ImmutableList<DbField> FIELDS = new ImmutableList.Builder<DbField>().addAll( Lists.newArrayList( ${table.classname}Field.values() ) ).build();
    private static ModelManagerFactory<${table.classname}> managerFactory = new ModelManagerFactory<${table.classname}>( ${table.classname}.class );
    public static ModelManager<${table.classname}> objects( ConnectionProvider connProvider ){ return managerFactory.get( connProvider ); }
    public static <T extends ${table.classname}> ModelManager<T> objects( Class<T> returnClass, ConnectionProvider connProvider ){ return new ModelManager<T>(returnClass, connProvider ); }
    public ImmutableList<DbField> fields(){ return FIELDS; }


    private void setDirty(){ this.isDirty = true; }
    private void unsetDirty(){ this.isDirty = false; }

//Getters//{{{
<#list table.cols as col>
    public ${col.javaTypeStr} get${col.javaNameCaps}(){ return this.${col.javaName}; }
</#list>  
//}}}

//Setters //{{{
<#list table.cols as col>
    public void set${col.javaNameCaps}( ${col.javaTypeStr} ${col.javaName} ){
        this.${col.javaName} = ${col.javaName}; 
    }
</#list>  
//}}}

	public ${table.classname}(){}

	public ${table.classname}( BasicResultSet rs, int offset, int size ){
		this.populateWithRS( rs, offset, size );
	}

	public void populateWithRS( BasicResultSet rs, int offset, int size ) {
<#list table.cols as col>
		this.${col.javaName} = rs.get${col.javaTypeStr}(offset + ${col_index} );
</#list>  
        this.isNew = false;
        this.isDirty = false;
    }

    public void save(ConnectionProvider cp){
        Object[] args = new Object[${table.cols?size}];
        if( this.isNew ){
            String sql = "INSERT INTO ${table.tablename} <#rt>
<#list table.cols as c>
	<#if c_index == table.cols?size-1>
		${c.name}<#t>
	<#else>
		${c.name},<#t>
	</#if>
</#list> values (<#t>
<#list table.cols as c>
	<#if c_index == table.cols?size-1>
		?<#t>
	<#else>
		?,<#t>
	</#if>
</#list>)";<#lt>
<#list table.cols as c><#t>
	<#if c.name==table.primaryKey.name>
            args[ ${c_index} ] = null;
	<#else><#t>
            args[ ${c_index} ] = this.${c.javaName};
	</#if><#t>
</#list>
            this.${table.primaryKey.javaName} = this.objects(cp).updateGetKey(sql, args);
            this.isNew = false;
            this.isDirty = false;
        }else{
            String sql = "UPDATE ${table.tablename} SET <#rt>
<#list table.cols as c>
	<#if c.name==table.primaryKey.name>
		<#t>
	<#elseif c_index==table.cols?size-1>
		${c.name} = ?<#t>
	<#else>
		${c.name} = ?,<#t>
	</#if>
</#list>
WHERE ${table.primaryKey.name} = ?";<#lt>
<#list table.cols as col>
	<#if col.name == table.primaryKey.name>
		<#t>
	<#else>
            args[${col_index-1}] = this.${col.javaName};
	</#if>
</#list>  
            args[${table.cols?size-1}] = this.${table.primaryKey.javaName};
            this.objects(cp).update(sql, args);
        }
    }

    public void delete(ConnectionProvider cp){
        if( this.${table.primaryKey.javaName} == null || this.isNew ){
            throw new IllegalStateException("Can't delete an instance of a model that has no primary key.");
        }else{
            String sql = "DELETE FROM ${table.tablename} WHERE ${table.tablename}.${table.primaryKey.name} = ?";
            this.objects(cp).update(sql, this.${table.primaryKey.javaName} );
        }
    }

    protected String showFields(){
        StringBuilder retVal = new StringBuilder("");
<#list table.cols as c>
	<#if c_index==table.cols?size-1>
        retVal.append("{").append("${c.javaName}=").append( this.${c.javaName} != null ? this.${c.javaName}.toString() : "null").append("},");
	<#else>
        retVal.append("{").append("${c.javaName}=").append( this.${c.javaName} != null ? this.${c.javaName}.toString() : "null").append("}]");
	</#if>
</#list>
        return retVal.toString();
    }

    public String toString(){
        StringBuilder retVal = new StringBuilder("[" + this.getClass().getName() + "<${table.primaryKey.javaName}=" + this.${table.primaryKey.javaName} + ">: ");
        retVal.append( showFields() );
        return retVal.toString();
    }

}
